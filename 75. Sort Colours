/*class Solution {
    public void sortColors(int[] nums) {
        //this is the bruth force approch
        t.c=o(n log n)
        s.c=o(1)
        Array.sort(nums);
    }}
class Solution {
    public void sortColors(int[] nums) {
        //this is the counting sort-in this we have to count the 0,1,2
        //t.c=o(n)
        //s.p=o(1)

    
        int count0 = 0, count1 = 0, count2 = 0;
        for (int n : nums) {
            if (n == 0) count0++;
            else if (n == 1) count1++;
            else count2++;
        }

        int i = 0;
        while (count0-- > 0) nums[i++] = 0;
        while (count1-- > 0) nums[i++] = 1;
        while (count2-- > 0) nums[i++] = 2; 
    }
}

class Solution {
    public void sortColors(int[] nums) {
        //this is the two pass approche -in this we have 3 numbers(value) to seperate so we have to  so leaving one and concedering 2 and do partitioning
        int index=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==0){
                int temp=nums[i];
                nums[i]=nums[index];
                nums[index]=temp;
                index++;
            }
        }
        for(int i=0;i<nums.length;i++){
            if(nums[i]==1){
                int temp=nums[i];
                nums[i]=nums[index];
                nums[index]=temp;
                index++;
            }
        }

    }
}
*/
class Solution {
    public void sortColors(int[] nums) {
        //take 3 pointering 
        int low=0,mid=0,high=nums.length-1;
        while(mid<=high){
            if(nums[mid]==0){
            int temp=nums[mid];
            nums[mid]=nums[low];
            nums[low]=temp;
            low++;
            mid++;
        }
        else if(nums[mid]==1){
            mid++;
        }
        else{
           int temp=nums[mid];
           nums[mid]=nums[high];
           nums[high]=temp;
           high--;
        }
        }
    }
}


